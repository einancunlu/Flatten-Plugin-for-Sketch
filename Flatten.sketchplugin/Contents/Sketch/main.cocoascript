

//
//  Created by Emin İnanç Ünlü
//  Copyright (c) 2015 Emin İnanç Ünlü. All rights reserved.
//


@import 'utility.cocoascript'


//--------------------------------------
// Global Variables
//--------------------------------------


var doc,
	command,
	selection,
	app = [NSApplication sharedApplication],
	defaults = [NSUserDefaults standardUserDefaults],
	scriptPath,
	scriptFolder,

	kPluginDomain = "com.einancunlu.sketch-plugins.flatten",
	kFlattenTag = "#flatten",
	kFlattenHiddenTag = "#flattenHidden",
	kImageLayerName = "Flattened Image",
	kNoLayerFoundMessage = "No layer found to be flattened. Use 'Flatten' command to create ones.",
	kEmptySelectionMessage = "Select something!",

	kGroupKey = kPluginDomain + ".groupKey",
	kImageLayerKey = kPluginDomain + ".imageLayerKey",
	kLayerVisibilityKey = kPluginDomain + ".layerVisibilityKey",
	kCuriosityKey = kPluginDomain + ".curiosityKey"


//--------------------------------------
// Menu Commands
//--------------------------------------


function flatten(context) {

	initCommand(context)

	var layers
	if ([selection count] == 0) {
		var currentArtboard = doc.currentPage().currentArtboard()
		if (!currentArtboard) {
			[doc showMessage: "Couldn't detect the current artboard automatically, please select one."]
		}
		layers = findLayersByTag_inContainer(kFlattenTag, currentArtboard)
	} else {
		if ([selection count] == 1 && selection.firstObject().class() == MSArtboardGroup) {
			var imageLayer = hasImageLayer(selection.firstObject())
			if (!imageLayer) {
				imageLayer = flattenLayers(selection)
				var name = "Artboards / " + selection.firstObject().name()
				var alert = [COSAlertWindow new]
				alert.setMessageText("Create Shared Layer Style")
				alert.setInformativeText("The artboard is flattened. Do you want to create a shared layer style for it?\n\nName of the shared layer style:")
				alert.addTextFieldWithValue(name)
				alert.addButtonWithTitle('Create')
				alert.addButtonWithTitle("Not Now")
				var responseCode = alert.runModal()
				if (responseCode == 1000) {
					var textfield = [alert viewAtIndex: 0]
					name = [textfield stringValue]
					var layerStyles = doc.documentData().layerStyles()
					if(layerStyles.addSharedStyleWithName_firstInstance) {
			        		var layerStyle = layerStyles.addSharedStyleWithName_firstInstance(name, imageLayer.style())
					} else {
						var layerStyle = MSSharedStyle.alloc().initWithName_firstInstance(name, imageLayer.style())
						layerStyles.addSharedObject(layerStyle)
					}
				}
				return
			}
		} else if ([selection count] == 1 && selection.firstObject().class() != MSArtboardGroup) {

		}
		layers = [NSArray array]
	    for (var i = 0; i < [selection count]; i++) {
	    	var selectedLayer = selection.objectAtIndex(i)
			layers = layers.arrayByAddingObjectsFromArray(findLayersByTag_inContainer(kFlattenTag, selectedLayer))
		}
	}
	if ([layers count] == 0) {
		addTagToLayers(selection, kFlattenTag)
		layers = selection
	}
  var imageLayer = flattenLayers(layers)
	if (typeof imageLayer !== 'undefined') {
		// if (selection.count() != 0) selection.firstObject().isSelected = false
		parentGroup = imageLayer.parentGroup()
		[parentGroup select: true byExpandingSelection: false]
	}
}

function toggleGroup(context) {

	initCommand(context)

	setImageMode(null)
}

function flattenAll(context) {

	initCommand(context)

	var noLayerFound = true
 	var currentPage = doc.currentPage()
	var loopPages = doc.pages().objectEnumerator(), page;
	while (page = loopPages.nextObject()) {
		[doc setCurrentPage: page]
    var layers = findLayersByTag_inContainer(kFlattenTag, page)
		if ([layers count] != 0) noLayerFound = false
		flattenLayers(layers)
	}
	if (noLayerFound) {
		[doc showMessage: kNoLayerFoundMessage]
	} else {
		[doc showMessage: "Flattening process is completed."]
	}
	[doc setCurrentPage: currentPage]
}

function switchToImageMode(context) {

	initCommand(context)

	setImageMode(true)
	[doc showMessage: "Switched to image mode."]
}

function switchToLayerMode(context) {

	initCommand(context)

	setImageMode(false)
	[doc showMessage: "Switched to layer mode."]
}

function selectSuggestedLayers(context) {

	initCommand(context)

	var numberOfSuggestedLayers = 0
	if (selection.firstObject()) {
		selection.firstObject().select_byExpandingSelection(false, false)
	}
	var children = doc.currentPage().children()
  for (var i = 0; i < [children count]; i++) {
    var layer = children[i]
		if (isReallyVisible(layer) == false) { continue }
		if (layer.style != undefined) {
			if (layer.style().blur().isEnabled()) {
				var find = new RegExp(kFlattenTag, "i")
				if (!layer.name().match(find)) {
					numberOfSuggestedLayers++
					layer.select_byExpandingSelection(true, true)
				}
			}
		}
	}

	if (numberOfSuggestedLayers == 0) {
		[doc showMessage: "All layers in this page seem good to me! No suggestion for this page. : )"]
	} else {
		var message
		if (numberOfSuggestedLayers == 1) {
			message =  " layer which can be flattened to increase the performance of the Sketch."
		} else {
			message =  " layers which can be flattened to increase the performance of the Sketch."
		}
		[doc showMessage: "Found " + numberOfSuggestedLayers + message]
	}
}

function addFlattenTagToSelections(context) {

	initCommand(context)

	if ([selection count] == 0) {
		[doc showMessage: kEmptySelectionMessage]
		return
	}
	addTagToLayers(selection, kFlattenTag)
}

function addFlattenHiddenTagToSelections(context) {

	initCommand(context)

	if ([selection count] == 0) {
		[doc showMessage: kEmptySelectionMessage]
		return
	}
	addTagToLayers(selection, kFlattenHiddenTag)
}

function help(context) {

	initCommand(context)

	var urlString = "https://medium.com/design-prototype-develop/flatten-plugin-for-sketch-af2d59b0458#.n2wmykvj5"
	[[NSWorkspace sharedWorkspace] openURL:[NSURL URLWithString: urlString]]
}

function feedbackByMail(context) {

	initCommand(context)

	var encodedSubject = [NSString stringWithFormat:@"SUBJECT=%@", [@"Feedback on the Flatten Plugin" stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]],
	encodedBody = [NSString stringWithFormat:@"BODY=%@", [@"" stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]],
	encodedTo = [[NSString stringWithFormat:@"apps.einancunlu", @"@gma", @"il.com"] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
	encodedURLString = [NSString stringWithFormat:@"mailto:%@?%@&%@", encodedTo, encodedSubject, encodedBody],
	mailtoURL = [NSURL URLWithString:encodedURLString]
	[[NSWorkspace sharedWorkspace] openURL:mailtoURL]
}

function feedbackByTwitter(context) {

	initCommand(context)

	var urlString = "https://twitter.com/einancunlu"
	[[NSWorkspace sharedWorkspace] openURL:[NSURL URLWithString: urlString]]
}

function empty(context) {

	initCommand(context)

	if (![defaults objectForKey: kCuriosityKey]) {
		saveObjectToUserDefaults(true, kCuriosityKey)
		[doc showMessage: "Wow, you're curious! Sorry but nothing here... : )"]
	}
}


//--------------------------------------
// Helper Functions
//--------------------------------------


function initCommand(context) {

	doc = context.document
	command = context.command
	selection = context.selection
	scriptPath = context.scriptPath
	scriptFolder = [scriptPath stringByDeletingLastPathComponent]
}

function flattenLayers(layers) {

	var returnLayer = [layers count] == 1
    for (var i = 0; i < [layers count]; i++) {
    	var layer = layers.objectAtIndex(i)

		if (isChildOfFlattenGroup(layer)) { continue }

		var imageLayer
		var layerIsArtboard = ([layer class] === MSArtboardGroup)
		if (layerIsArtboard) {
			imageLayer = getImageLayerForArtboard(layer)
		} else if ([command valueForKey: kImageLayerKey onLayer: layer]) {
			var parent = [layer parentGroup]
			if (parent && [parent class] === MSArtboardGroup) {
				imageLayer = layer
				layer = parent
				layerIsArtboard = true
			} else {
				continue
			}
		} else {
			// Skip the layer if it's hidden in first place
			var parent = [layer parentGroup]
			if (parent && ![command valueForKey: kGroupKey onLayer: parent]) {
				if ([layer isVisible] == false) {
					continue
				}
			}
			imageLayer = getImageLayerAndGroup(layer)
			if (!imageLayer) { return }
			// Don't update the imageLayer if its group is hidden
			if ([[imageLayer parentGroup] isVisible] == false) {
				continue
			}
		}

		// Begin flattening

		// Set visibility of layers
		[imageLayer setIsVisible: false]
		var layersToHide = []
		if (layerIsArtboard) {
			layersToHide = findLayersByTag_inContainer(kFlattenHiddenTag, layer)
		    for (var j = 0; j < [layersToHide count]; j++) {
		    	var layerToHide = layersToHide.objectAtIndex(j)
				[command setValue: [layerToHide isVisible] forKey: kLayerVisibilityKey onLayer: layerToHide]
				[layerToHide setIsVisible: false]
			}
		} else {
			[layer setIsVisible: true]
		}
		// Flatten
		var tempFolderPath = getTempFolderPath()
		var filePath = tempFolderPath + "/temp.png"
		exportLayerToPath(layer, filePath)
		setBitmapFill(imageLayer, filePath)

		// End flattening

		cleanUpTempFolder(tempFolderPath)
		// Restore visibility of layers
		if (layerIsArtboard) {
		    for (var j = 0; j < [layersToHide count]; j++) {
		    	var layerToHide = layersToHide.objectAtIndex(j)
				var initialVisibility = [command valueForKey: kLayerVisibilityKey onLayer: layerToHide] || true
				[layerToHide setIsVisible: initialVisibility]
			}

			// Sync shared style
			var isSelectionEmpty = selection.count() == 0
			[imageLayer select: true byExpandingSelection: false]
			if(imageLayer.updateSharedStyleToMatchSelf) {
				imageLayer.updateSharedStyleToMatchSelf()
			} else {
				var action = doc.actionsController().actionForID("MSSyncSharedStyleAction")
				action.syncSharedStyle(imageLayer.style())
			}
			var action = doc.actionsController().actionForID("MSMoveToFrontAction")
			action.moveToFront(imageLayer)
			[imageLayer select: false byExpandingSelection: false]
			// [layer select: !isSelectionEmpty byExpandingSelection: false]
		} else {
			[layer setIsVisible: false]
		}
		[imageLayer setIsVisible: !layerIsArtboard]
		if (returnLayer) { return imageLayer }
    }
}

function setImageMode(bool) {

	// Find layers
	var layers
	if ([selection count] <= 0) {
		layers = findLayersByTag_inContainer(kFlattenTag)
	} else {
		layers = [NSArray array]
	    for (var i = 0; i < [selection count]; i++) {
	    	var selectedLayer = selection.objectAtIndex(i)
			layers = layers.arrayByAddingObjectsFromArray(findLayersByTag_inContainer(kFlattenTag, selectedLayer))
		}
	}
	if ([layers count] == 0) {
		[doc showMessage: "No layer found to be switched."]
		return
	}

	// Toggle layers
    for (var i = 0; i < [layers count]; i++) {
    	var layer = layers.objectAtIndex(i)
		toggle(layer, bool)
	}
}

function toggle(layer, isImageModeOn) {

	if ([layer class] === MSArtboardGroup) { return }
	var parent = [layer parentGroup]
	if (parent && [command valueForKey: kGroupKey onLayer: parent]) {
		if (!isImageModeOn) { isImageModeOn = [layer isVisible] }
		[layer setIsVisible: !isImageModeOn]
		var layers = parent.layers()
	    for (var i = 0; i < [layers count]; i++) {
	    	var childLayer = layers.objectAtIndex(i)
			if ([command valueForKey: kImageLayerKey onLayer: childLayer]) {
				[childLayer setIsVisible: isImageModeOn]
			}
		}
	}
}

function getImageLayerForArtboard(artboard) {

	var imageLayer = hasImageLayer(artboard)
	if (imageLayer) {
		updateImageLayerRect(layer, artboard)
		return imageLayer
	}
	return createImageLayer(artboard, artboard)
}

function hasImageLayer(artboard) {

	var layers = [artboard layers]
	for (var i = 0; i < [layers count]; i++) {
		var layer = layers.objectAtIndex(i)
		if ([command valueForKey: kImageLayerKey onLayer: layer]) {
			return layer
		}
	}
	return false
}

function getImageLayerAndGroup(actualLayer) {

	// Check if the layer is in a proper group and has image layer in it
	var parent = [actualLayer parentGroup]
	if (parent) {
		if ([command valueForKey: kGroupKey onLayer: parent] && [[parent layers] count] == 2) {
			var layers = [parent layers]
		    for (var i = 0; i < [layers count]; i++) {
		    	var childLayer = layers.objectAtIndex(i)
				if ([command valueForKey: kImageLayerKey onLayer: childLayer]) {
					updateImageLayerRect(childLayer, actualLayer)
					parent.resizeToFitChildrenWithOption(1)
					return childLayer
				}
			}
		}
	} else {
		return nil
	}

	// If not, create a group and image layer
	var parentName = generateParentGroupName([actualLayer name])

	var newGroup = MSLayerGroup.groupFromLayers(MSLayerArray.arrayWithLayers([actualLayer]))
	newGroup.name = parentName
	newGroup.setConstrainProportions(false)
	[command setValue: true forKey: kGroupKey onLayer: newGroup]

	if (false) {
		var newGroup = MSLayerGroup.new()
		[command setValue: true forKey: kGroupKey onLayer: newGroup]
		newGroup.name = parentName
		newGroup.setConstrainProportions(false)
		var indexOfLayer = parent.indexOfLayer(actualLayer)
		actualLayer.removeFromParent()
		newGroup.addLayers([actualLayer])
		[parent insertLayers: [newGroup] afterLayer: actualLayer]
}

	imageLayer = createImageLayer(actualLayer, newGroup)
	newGroup.resizeToFitChildrenWithOption(1)
	return imageLayer
}

function generateParentGroupName(layerName) {

	var string = [NSString stringWithString: layerName]
	var name = [string stringByReplacingOccurrencesOfString: kFlattenTag withString: @"" options: NSCaseInsensitiveSearch range: NSMakeRange(0, [string length])]
	return name
}

function createImageLayer(referenceLayer, parent) {

	var rectangleShape = MSRectangleShape.alloc().init()
	var f = referenceLayer.frame()
	var frame = MSRect.rectWithRect(NSMakeRect(f.x(), f.y(), f.width(), f.height()))
	if ([referenceLayer class] === MSArtboardGroup) {
		frame.x = 0
		frame.y = 0
	}
	rectangleShape.frame = frame
	var imageLayer = MSShapeGroup.shapeWithPath(rectangleShape)
	parent.addLayers([imageLayer])
	[command setValue:true forKey: kImageLayerKey onLayer: imageLayer]
	if ([parent class] === MSArtboardGroup) {
		[imageLayer setName: kImageLayerName + " " + kFlattenTag]
		[parent setName: generateParentGroupName(parent.name())]
	} else {
		[imageLayer setName: kImageLayerName]
	}
	return imageLayer
}

function updateImageLayerRect(imageLayer, referenceLayer) {

	var rect = [referenceLayer absoluteRect]
	[[imageLayer absoluteRect] setX: [rect x]]
	[[imageLayer absoluteRect] setY: [rect y]]
	[[imageLayer absoluteRect] setWidth: [rect width]]
	[[imageLayer absoluteRect] setHeight: [rect height]]
}

function isChildOfFlattenGroup(layer) {

	if ([layer class] === MSArtboardGroup) return false
	var parent = [layer parentGroup]
	if (parent) {
		var find = new RegExp(kFlattenTag, "i")
		if (parent.name().match(find)) {
			return true
		} else {
			return isChildOfFlattenGroup(parent)
		}
	} else {
		return false
	}
}

function isReallyVisible(layer) {

	if (!layer.isVisible()) { return false }
	if ([layer class] === MSArtboardGroup) { return true }
	var parent = [layer parentGroup]
	if (parent) {
		return isReallyVisible(parent)
	} else {
		return true
	}
}

function addTagToLayers(layers, tag) {

	if (!layers) { return }
    for (var i = 0; i < [layers count]; i++) {
    	var layer = layers.objectAtIndex(i)
		var find = new RegExp(tag, "i")
		if (!layer.name().match(find)) {
			layer.setName(layer.name() + " " + tag)
		}
	}
}
